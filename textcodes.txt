 IN ROOT VALIDATION DOCUMENT FINALIZE METHOD write side
     deactivateOptional(me);

 
 IN ROOT PRE VALIDATION INIT METHOD. write side
 
 activateAll(me);


WRITE SIDE ENVIRONMENT

/**
 * Recursively goes through the map and turns off any JOptionalGroups that don't have data.
 * Must be called on DocFinalize.
 * @param jEntity Any JEntity, should probably be the root.
 */
private boolean deactivateOptional(JEntity jEntity){
    boolean hasChildData = false;
    if (jEntity instanceof JOptionalGroup){
        for (int i=0; i<jEntity.getChildrenCount(); i++){
            JEntity child = (JEntity)jEntity.getJChild(i);
            if (child != null && deactivateOptional(child)){
                hasChildData = true;
            }
        }
        if (!hasChildData){
            ((JOptionalGroup)jEntity).setActivated(false);
        }
        return hasChildData;
    } else if (!(jEntity instanceof JElement)){
        for (int i=0; i<jEntity.getChildrenCount(); i++){
            JEntity child = (JEntity)jEntity.getJChild(i);
            if (child != null && deactivateOptional(child)){
                hasChildData = true;
            }
        }
        return hasChildData;
    } else if (jEntity instanceof JElement){
        if (jEntity != null && jEntity.getProperty("defaultValue") == null && ((JElement)jEntity).hasData()){
            return true;
        }
    }
    return hasChildData;
}

/**
 * Goes through the whole map and activates all JOptionalGroups. Must be called on PreValidation.
 * @param entity Any JEntity, should probably be the root.
 */
private void activateAll(Entity entity){
    for (int i = 0; i < entity.getTemplateChildrenCount(); i++) {
        if(!(entity.getTemplateChild(i) instanceof JElement)) {
            activateAll(entity.getTemplateChild(i));
        }
    }
    if (entity instanceof JOptionalGroup) {
        ((JOptionalGroup)entity).setActivated(true);
    }
}



 READ SIDE ENVIRONMENT
 
 /**
     * Checks to see if the given JEntity is present.
     * <br><b>Requires the following Methods:</b>
     * <ul>
     *     <li>hasChildData()</li>
     *     <li>makeXPath()</li>
     * </ul>
     * @param en The entity you would like to check for.
     * @param extraMsg Any extra text you would like to add to the error message.
     */
    private void mandatoryCheck(JEntity en, String extraMsg){
        boolean hasData = false;
        if((en instanceof JOptionalGroup)) {
            if(((JOptionalGroup)en).isActivated() == true) {
                hasData = hasChildData(en);
            }
        }else {
            hasData = hasChildData(en);
        }
        if(hasData == false){
            en.reportError(en, "Missing mandatory data: " + makeXPath(en) + "; " +extraMsg);
        }
    }

    /**
     * Checks to see if a JEntity contains child data or not.
     * @param en The entity to check.
     * @return True or False
     */
    private boolean hasChildData(JEntity en){
        if(!(en instanceof JElement)){
            for(int i=0; i<en.getChildrenCount(); i++){
                //if a child has data, then i have data
                if(hasChildData(en.getJChild(i)) == true){
                    return true;
                }
            }
        }else{//this is an element
            return ((JElement)en).hasData();
        }
        return false;//to make compiler happy
    }


    /**
     * Uses a regular expression to turn a javaPath into a properly formatted XPath expression
     * @param en The entity you would like a XPath for
     * @return A XPath expression
     */
    private String makeXPath(JEntity en) {
        String path = en.getFullyQualifiedJavaName().replaceAll("\\.[^\\.]+Rep(?=\\.)", "");
        String[] parts = path.split("\\.");
        String xpath = "/" + en.getJRoot().getPropertyString("name");
        for (int i = 1; i < parts.length; i++) {
            String part = parts[i];//ignore the root name
            part = Character.toUpperCase(part.charAt(0)) + part.substring(1);
            xpath += "/" + part;
        }
        return xpath;
    }
    
        /**
     * Checks to see if the given JRepeatableGroup has a specific repetition, errors if not found.
     * <br><b>Requires the following Methods:</b>
     * <ul>
     *     <li>makeXPath()</li>
     * </ul>
     * @param group The JRepeatableGroup you would like to check.
     * @param field javaName of the field you want to check
     * @param value value of field you want to check for.
     * @param extraMsg Any extra text you would like to add to the error message.
     */
    private void mandatoryRep(JRepeatableGroup group, String field, String value, String extraMsg){
        if(!group.hasRepetition(field, value)) {
            group.reportError(group, "Missing mandatory data: " + makeXPath(group) + " with " +
                                     field + " = " + value + " is required;" + extraMsg);
        }
    }
 
 
 
 
 in document finalize root node for mandatory hierarchical structure.
 mandatoryCheck(header, "");
 mandatoryCheck(header.orderHeader, "");
 
 in document finalize parent node for mandatory hierarchical structure for subfolders.
 root.mandatoryCheck(lineItemAcknowledgement,"");



**** CODES ALLOWED, ELSE DROP GROUP(WRITE SIDE-GROUP- ENVIRONMENT) ****						

/**
     * This method needs to be placed in the environment of a (write side) JRepeatableGroup to
     * override its verify() method. Add the condition you need.
     * @param entity FI4 passes each read side JRepetition as this parameter
     * @return True(will create a repetition) or False(will not create a repetition)
     */
    public boolean verify(JEntity entity) {
        if(entity.getString("addressTypeCode").matches("SF || ST")) {
            return true;
        }
        return false;
    }
**********************************************************************************
DROP GROUP CONDITIONS-- && convert to conditions
-do not put choices
-set data type as String
-put code in write side main parent folder.


Codes allowed, else drop ItemScheduleQualifier and ItemScheduleDate:
068: Scheduled Ship Date

if(!itemScheduleQualifier.getString().matches("068"))
    {
        itemScheduleQualifier.delete();
        itemScheduleDate.delete();
    }



***********************************************************************************
				**** MANDATORY WHEN addressTypeCode=ST ****
				

if(addressTypeCode.getString().equals("ST")) {
        root.mandatoryCheck(addressName,"Mandatory when AddressTypeCode = ST");
		
		
		
*********************************************************************************		
		CONVERT TO HT FOR RSX
		
	if(me.getString().equals("TP")){
me.setString("TH");
}
********************************************************************************	
	*****Set Meta_IsDropShip to "true"    Set Meta_IsDropShip to "false"*****
	
	
	if(header.orderHeader.primaryPOTypeCode.getString().equals("DS")) {
meta.setActivated(true);
meta.isDropShip.setString("true");

}
else{
if(header.orderHeader.primaryPOTypeCode.getString().equals("SA")){
meta.setActivated(true);
meta.isDropShip.setString("false");}
}


********************************************************************************
One of either TermsNetDueDate or TermsNetDueDays is required

checkMandatory(termsNetDueDate,termsNetDueDays);
checkMandatory(termsNetDueDays,termsNetDueDate);

---------------------------------------------------------------------------------
WHEN ADDRESS4 IS PRESENT, ADDRESS3 IS REQUIRED.

 if(address2.hasData()){
        root.mandatoryCheck(address1,"If Address2 is present, Address1 is required.");
---------------------------------------------------------------------------------
IF INPUT IS LONGER THAN 80 CHARACTERS, SPS TO TRUNCATE TO BE 80.
-do not put min max value in read side
-put only max valueon write side
-if mentioned mandatory=Y set it only in read field and not in write side

------------------------------------------------------------------------------------
CHOICES MANDATORY

mandatoryRep(header.address, "addressTypeCode", "ST", "");
------------------------------------------------------------------------------------------

IF NOT PRESENT, SPS MAP TO CREATE ITEMREGISTRY.SUMMARY GROUP AND CALCULATE TOTALLINEITEMNUMBER (only for 846)

String lineNum = "0";
for (int i = 0; i < structure.getChildrenCount(); i++) {
write.structure.structureRep liRep = structure._getRep(i);
lineNum = NumberUtilities.Calc.Add(lineNum, String.valueOf(liRep.lineItem.getChildrenCount()));
}

if (!root.summary.totalLineItemNumber.hasData()) {
root.summary.totalLineItemNumber.setString(lineNum.replaceAll("\\.0+$",""));
}

------------------------------------------------------------------------------------------------
MAP TO CALCULATE TOTAL NUMBERS OF LINEITEM RECORDS IF NOT PRESENT IN DATA

if (!summary.totalLineItemNumber.hasData()){
summary.setActivated(true);
summary.totalLineItemNumber.setNumber(lineItem.getChildrenCount());
}

-----------------------------------------------------------------------------

AT LEAST ONE ADDRESSLOCATIONNUMBER OR ADDRESSNAME MUST BE PRESENT. 

if(!addressLocationNumber.hasData() && !addressName.hasData()){
       reportError("One of AddressLocationNumber or AddressName must be present.");
   }
   
   -------------------------------------------------------------------------------------------
   IF EITHER LOCATIONCODEQUALIFIER OR ADDRESSLOCATIONNUMBER IS PRESENT, THEN BOTH ARE REQUIRED. 
   
   checkMandatory(locationCodeQualifier,addressLocationNumber);
    checkMandatory(addressLocationNumber,locationCodeQualifier);
	
------------------------------------------------------------------------------------------------------	
	  root.checkTpidAndPONum(tradingPartnerId, purchaseOrderNumber);
	  
	  
-----------------------------------------------------------------------------------------------------	  
	  
	  for(int i=0; i<header.address.getChildrenCount(); i++) {
        String addrCode = header.address._getRep(i).addressTypeCode.getString();
        if (!addrCodeList.contains(addrCode)) {
            addrCodeList.add(addrCode);
        }
        else{
            reportError("Each type of AddressTypeCode can be sent a max of 1 time per PO.");
        }
    }
--------------------------------------------------------------------------------------------------
	to remove leading zeros
me.setString(NumberUtilities.Format.RemoveLeadingZeros(me.getString()));

and that condition will be something like this -
if(me.getString().length() == 2 && me.getString().startsWith("0"))
-----------------------------------------------------------------------------------------------------
PackingMedium and PackingMaterial (if present) valid combinations (enforced by map, else fail):
CTN
PLT
CTN25
PLT94


if(packingMedium.hasData() && packingMaterial.hasData()){
        if(packingMedium.getString().equals("CTN") && !packingMaterial.getString().equals("25")){
            reportError("PackingMedium and PackingMaterial valid combination is CTN25");
     
        }
        if(packingMedium.getString().equals("PLT") && !packingMaterial.getString().equals("94")){
            reportError("PackingMedium and PackingMaterial valid combination is PLT94");
     
        }
    }
	
-------------------------------------------------------------------------------------------------------------
QUALIFIER SOURCING
if(_source().weightQualifier.getString().matches("G")){
    packWeight.setString(_source.packWeight.getString());
}

OR IN WRITE SOURCE FIELD (make changes after rep)
 
 read.orderLevel.orderLevelRep.packLevel.packLevelRep.physicalDetails.physicalDetailsRep[weightQualifier=G].packWeight
 
 --------------------------------------------------------------------------------------------------------------------------
     RSX TO CSV TO SET HEADER IN VALIDATION ROOT WRITE SIDE
	 
	 public void documentFinalize(ValidationEvent e) {
    setHeader(header);
}//end-method

IN WRITE ENVIRONMENT 
/**
     * Sets the column headers for a CSV header group. These will be set as the name of each field.
     * @Param jEntity The header group that will be printed before each item.
     */
    private void setHeader(JEntity jEntity) {
        if(jEntity instanceof JElement) {
            ((JElement)jEntity).setString(jEntity.getLabel());
        }else {
            for(int i=0; i < jEntity.getChildrenCount(); i++){
                setHeader(jEntity.getJChild(i));
            }
        }
    }
	
----------------------------------------------------------------------------------------
SPS: Please quote wrap value
 me.setString("\""+me.getString()+"\"");
 
 -------------------------------------------------------------------------------------
 SPS: Concatenate all source field occurrences into one output field.
 
 String note = "";
    for(JEntity nteRep : root._source().header.notes){
        if(nteRep.getString("noteCode").matches("GEN") && nteRep.getString("note").length() > 0){
            note += nteRep.getString("note")+" ";
        }
    }
    if(Str.HasData(note)){
        message.setString("\""+note.trim()+"\"");
    }
	---------------------------------------------------------------------------------------------
	
	for(int i=0;i<_source().record.getChildrenCount(); i++){
        if(_source().record.getJChild(i).getString("customer_ID").matches("FTR")){
            document._getRep(i).header.invoiceHeader.tradingPartnerId.setString("FTR");
        }
    }
	
	--------------------------------------------------------------------------------------------
	
	/**
 * This Method will write out a new document for each repetition of a RepeatableGroup
 * @Param docGroup Should be the only child of the root, with each repetition representing a new document
 *
 */
private void splitOutDocs(JRepeatableGroup docGroup) {
    ArrayList<JEntity> docList = new ArrayList<JEntity>();
    //add each rep to a list so we can remove the group.
    for(int i=0; i < docGroup.getChildrenCount(); i++) {
        docList.add(docGroup.getJChild(i));
    }
    //remove the document group so it doesn't get written out.
    docGroup.delete();
    //write out each document rep as a new doc.
    for(JEntity doc : docList) {
        for(int i=0; i < doc.getChildrenCount(); i++) {
            _root().add(doc.getJChild(i));
        }
        _root().getResolver().insert();
        _root().getResolver().endDocument();
        //clear for next Doc
        while(_root().getChildrenCount() > 0) {
            _root().getJChild(0).delete();
        }
    }
}
------------------------------------------------------------------------------------------
If positive value in total amount, SPS to set InvoiceTypeCode = PR
else set to CR

if(summary.totalAmount.getString().contains("-")){
        header.invoiceHeader.invoiceTypeCode.setString("CR");
    }else{
        header.invoiceHeader.invoiceTypeCode.setString("PR");
    }
	
-------------------------------------------------------------------------------------------	-
getString().contains("- ")
setString("CR")
---------------------------------------------------------------------------------------
private void validateDate(JElement elmnt){
    String dt = elmnt.getString();
    try{ 
        SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd"); 
        myFormat.setLenient(false);//Only allow valid dates 
        Date tempDate = myFormat.parse(dt); 
    }
    catch(Exception err){ 
        elmnt.reportError(elmnt, "Invalid date \"" + dt + "\" found in "+ makeXPath(elmnt));
    }
}    


if(me.hasData()){ 
        root.validateDate(me);
    }
--------------------------------------------------------------------------------------------------------
on both item level rep
validation doc finalize --  > root.counter++;
on wite side root
if(!summary.totalLineItemNumber.hasData()){
        summary.totalLineItemNumber.setNumber(counter);
    }
write root evn - int counter = 0;	